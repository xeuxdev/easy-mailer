// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified Boolean?  @default(false)
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?

  @@index([email, id])
}

model Profile {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  api_key String?
  userId  String  @unique @db.ObjectId
  eventId String  @db.ObjectId

  events EmailEvent[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MailInfo {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  eventId String @db.ObjectId

  received String[]
  rejected String[]
  pending  String[]

  event     EmailEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model EmailEvent {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  profileId String     @db.ObjectId
  requests  MailInfo[]
  eventTime DateTime   @default(now())
  profile   Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
}
